{"version":3,"sources":["../../src/timing/index.ts","../../src/timing/concrete/file.ts","../../src/timing/concrete/redis.ts","../../src/timing/concrete/constraint.ts"],"sourcesContent":["export * from './concrete'\nexport * from './contract'\n","import { TimeConstraint, Timing } from \"../contract\";\nimport fs from 'fs';\nimport * as path from 'path';\n\ntype Locker = {\n    [key: string]: string // 本当はvalueはdateだが、全部parseしてdateにするのは非効率なのでstringで保持する\n}\n\nexport class FileTiming implements Timing {\n    private locker: Locker = {}\n\n    constructor(private readonly filepath: string) {\n        const dir = path.dirname(this.filepath);\n\n        // ディレクトリが存在しない場合は作成\n        if (!fs.existsSync(dir)) {\n            fs.mkdirSync(dir, { recursive: true });\n        }\n\n        // ファイルが存在しない場合は作成\n        if (!fs.existsSync(this.filepath)) {\n            this.flush()\n            return\n        }\n\n        this.read()\n    }\n\n    private read() {\n        this.locker = JSON.parse(fs.readFileSync(this.filepath, 'utf-8'))\n    }\n\n    private flush() {\n        fs.writeFileSync(this.filepath, JSON.stringify(this.locker), 'utf-8')\n    }\n\n    async allow({\n        key,\n        date,\n    }: {\n        key: string,\n        date: Date,\n    }) {\n        if (this.locker[key] === undefined) {\n            return true\n        }\n\n        const nextTime = new Date(this.locker[key])\n\n        return date >= nextTime\n    }\n\n    async complete({\n        key,\n        constraint,\n        date,\n    }: {\n        key: string,\n        constraint: TimeConstraint,\n        date: Date,\n    }) {\n        this.locker[key] = constraint.next(date).toISOString()\n        this.flush()\n    }\n}\n\n","import { TimeConstraint, Timing } from \"@/timing/contract\";\nimport { Redis } from \"ioredis\";\n\ntype RedisTimingInput = {\n    host: string, port: number, keyPrefix?: string\n}\n\nexport const withRedisTiming = async (input: RedisTimingInput, f: (timing: RedisTiming) => Promise<void>) => {\n    const timing = new RedisTiming(input)\n\n    try {\n        await f(timing)\n    } finally {\n        await timing.terminate()\n    }\n}\n\nexport class RedisTiming implements Timing {\n    private client\n\n    constructor({ host, port, keyPrefix }: RedisTimingInput) {\n        this.client = new Redis({\n            host,\n            port,\n            keyPrefix\n        })\n    }\n\n    async allow({\n        key,\n        date,\n    }: { key: string, date: Date; }) {\n        // TTLで勝手に消えるのでkeyで取得できたらfalse, なかったらtrue\n        const result = await this.client.exists(key)\n        return result === 0\n    }\n\n    async complete({\n        key,\n        constraint,\n        date,\n    }: { key: string, constraint: TimeConstraint, date: Date; }) {\n        const next = constraint.next(date).getTime()\n        const ttl = Math.floor((next - date.getTime()) / 1000); // TTLを秒単位で計算\n\n        // nextまでの時間をTTLとしてredisに保存する\n        // keyはkeyでvalueはなくてもいい\n        if (ttl > 0) {\n            await this.client.set(key, '', 'EX', ttl); // TTLを設定してキーを保存\n        }\n    }\n\n    async terminate() {\n        await this.client.quit()\n    }\n}\n","\nimport { TimeConstraint } from \"@/timing/contract\"\nimport { AtLeastOne } from \"@/util/types\"\n\nexport class Rate implements TimeConstraint {\n    constructor(private readonly param: AtLeastOne<{\n        h: number,\n        m: number,\n    }>) { }\n\n    next(date: Date): Date {\n        const h_ms = (this.param.h || 0) * 60 * 60 * 1000\n        const m_ms = (this.param.m || 0) * 60 * 1000\n        const timestamp = date.getTime()\n\n        return new Date(timestamp + h_ms + m_ms)\n    }\n}\n\nexport class Daily implements TimeConstraint {\n    constructor(private readonly param: {\n        h: number,\n        m: number,\n    }) { }\n\n    next(date: Date): Date {\n        const base = new Date(\n            Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), this.param.h, this.param.m)\n        )\n\n        return date <= base\n            ? base\n            : (() => {\n                base.setDate(base.getDate() + 1)\n                return base\n            })()\n    }\n}\n"],"mappings":"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","names":["fs"]}