{"version":3,"sources":["../../src/eth/index.ts","../../src/eth/tx.ts","../../src/eth/util.ts"],"sourcesContent":["export * from './tx'\nexport * from './util'\nexport * from './wallet'\n","import { Wallet } from \"@/eth/wallet\";\nimport Web3, { Transaction } from \"web3\";\n\nexport async function getPriorityFee(web3: Web3) {\n    // 最新のブロックを取得\n    const latestBlock = await web3.eth.getBlock('latest');\n\n    // FeeHistoryを取得\n    const feeHistory = await web3.eth.getFeeHistory(4, latestBlock.number, [25, 50, 75]);\n\n    // 中央値（50パーセンタイル）のpriority feeを計算\n    const priorityFees = feeHistory.reward.map(reward => parseInt(reward[1].toString(), 16));\n    const averagePriorityFee = priorityFees.reduce((a, b) => a + b, 0) / priorityFees.length;\n\n    return BigInt(averagePriorityFee === 0 ? 1 : Math.floor(averagePriorityFee));\n}\n\n\n// nonceやmaxFeePerGas, maxPriorityFeePerGas を自動で設定してtxをとばす\nexport async function sendTx(web3: Web3, wallet: Wallet, tx: Omit<Transaction, 'maxFeePerGas' | 'maxPriorityFeePerGas'>) {\n    const new_tx = tx as Transaction\n\n    if (!('nonce' in new_tx)) {\n        const nonce = await web3.eth.getTransactionCount(wallet.wallet_address)\n        new_tx.nonce = nonce\n    }\n\n    const latestBlock = await web3.eth.getBlock(\"latest\");\n    const baseFee = latestBlock.baseFeePerGas!;\n    const maxPriorityFeePerGas = await getPriorityFee(web3);\n\n    new_tx.maxFeePerGas = (baseFee + maxPriorityFeePerGas) * BigInt(2)\n    new_tx.maxPriorityFeePerGas = maxPriorityFeePerGas\n\n    const signed_tx = await web3.eth.accounts.signTransaction(tx, wallet.private_key)\n    return await web3.eth.sendSignedTransaction(signed_tx.rawTransaction)\n}\n","import { TransactionReceipt } from \"web3\"\n\nexport type PrettyData = {\n    method: string\n    parameters: string[]\n}\n\nexport function prettyData(data: string): PrettyData {\n    const method = data.slice(0, 10)\n\n    const cleanedData = data\n\n    const chunkSize = 64; // 32バイト = 64文字\n\n    // 32バイトごとに分割\n    const parameters: string[] = []\n    for (let i = 10; i < cleanedData.length; i += chunkSize) {\n        parameters.push(cleanedData.slice(i, i + chunkSize));\n    }\n\n    return {\n        method,\n        parameters\n    }\n}\n\nexport function extractTransactionReceipt(receipt: TransactionReceipt) {\n    return {\n        transactionHash: receipt.transactionHash\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGA,eAAsB,eAAe,MAAY;AAE7C,QAAM,cAAc,MAAM,KAAK,IAAI,SAAS,QAAQ;AAGpD,QAAM,aAAa,MAAM,KAAK,IAAI,cAAc,GAAG,YAAY,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;AAGnF,QAAM,eAAe,WAAW,OAAO,IAAI,YAAU,SAAS,OAAO,CAAC,EAAE,SAAS,GAAG,EAAE,CAAC;AACvF,QAAM,qBAAqB,aAAa,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,aAAa;AAElF,SAAO,OAAO,uBAAuB,IAAI,IAAI,KAAK,MAAM,kBAAkB,CAAC;AAC/E;AAIA,eAAsB,OAAO,MAAY,QAAgB,IAAgE;AACrH,QAAM,SAAS;AAEf,MAAI,EAAE,WAAW,SAAS;AACtB,UAAM,QAAQ,MAAM,KAAK,IAAI,oBAAoB,OAAO,cAAc;AACtE,WAAO,QAAQ;AAAA,EACnB;AAEA,QAAM,cAAc,MAAM,KAAK,IAAI,SAAS,QAAQ;AACpD,QAAM,UAAU,YAAY;AAC5B,QAAM,uBAAuB,MAAM,eAAe,IAAI;AAEtD,SAAO,gBAAgB,UAAU,wBAAwB,OAAO,CAAC;AACjE,SAAO,uBAAuB;AAE9B,QAAM,YAAY,MAAM,KAAK,IAAI,SAAS,gBAAgB,IAAI,OAAO,WAAW;AAChF,SAAO,MAAM,KAAK,IAAI,sBAAsB,UAAU,cAAc;AACxE;;;AC7BO,SAAS,WAAW,MAA0B;AACjD,QAAM,SAAS,KAAK,MAAM,GAAG,EAAE;AAE/B,QAAM,cAAc;AAEpB,QAAM,YAAY;AAGlB,QAAM,aAAuB,CAAC;AAC9B,WAAS,IAAI,IAAI,IAAI,YAAY,QAAQ,KAAK,WAAW;AACrD,eAAW,KAAK,YAAY,MAAM,GAAG,IAAI,SAAS,CAAC;AAAA,EACvD;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ;AAEO,SAAS,0BAA0B,SAA6B;AACnE,SAAO;AAAA,IACH,iBAAiB,QAAQ;AAAA,EAC7B;AACJ;","names":[]}